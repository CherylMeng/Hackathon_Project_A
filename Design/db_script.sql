CREATE TABLE USER_ROLE(
  ROLE_ID NUMBER,
  ROLE_NAME VARCHAR2(20),
  CONSTRAINT PK_USER_ROLE PRIMARY KEY (ROLE_ID)
);

INSERT INTO USER_ROLE(ROLE_ID, ROLE_NAME) VALUES (1, 'Administrator');
INSERT INTO USER_ROLE(ROLE_ID, ROLE_NAME) VALUES (2, 'Requestor');
INSERT INTO USER_ROLE(ROLE_ID, ROLE_NAME) VALUES (3, 'Manager');
INSERT INTO USER_ROLE(ROLE_ID, ROLE_NAME) VALUES (4, 'Supplier');

CREATE TABLE USER_STATUS(
  STATUS_ID NUMBER,
  STATUS_NAME VARCHAR(20),
  CONSTRAINT PK_USER_STATUS PRIMARY KEY (STATUS_ID)
);
INSERT INTO USER_STATUS(STATUS_ID, STATUS_NAME) VALUES (1, 'CREATED');
INSERT INTO USER_STATUS(STATUS_ID, STATUS_NAME) VALUES (2, 'APPROVED');
INSERT INTO USER_STATUS(STATUS_ID, STATUS_NAME) VALUES (3, 'ENABLED');
INSERT INTO USER_STATUS(STATUS_ID, STATUS_NAME) VALUES (4, 'DISABLED');
INSERT INTO USER_STATUS(STATUS_ID, STATUS_NAME) VALUES (5, 'DELETED');

CREATE TABLE USERS(
  USER_ID NUMBER,
  ROLE_ID NUMBER,
  NAME VARCHAR(50),
  MANAGER_ID NUMBER,
  STATUS NUMBER,
  CREATED_TIME TIMESTAMP DEFAULT systimestamp,
  APPROVED_TIME TIMESTAMP,
  ENABLED_TIME TIMESTAMP,
  DISABLED_TIME TIMESTAMP,
  DELETED_TIME TIMESTAMP,
  CONSTRAINT PK_USER PRIMARY KEY (USER_ID),
  CONSTRAINT FK_USER_ROLE FOREIGN KEY (ROLE_ID) REFERENCES USER_ROLE(ROLE_ID),
  CONSTRAINT FK_USER_MANAGER FOREIGN KEY (MANAGER_ID) REFERENCES USERS(USER_ID),
  CONSTRAINT FK_USER_STATUS FOREIGN KEY (STATUS) REFERENCES USER_STATUS(STATUS_ID)
);

CREATE TABLE USER_INFO_TYPE(
  TYPE_ID NUMBER,
  TYPE_NAME VARCHAR(20),
  IS_MANDATORY VARCHAR(1),
  CONSTRAINT PK_USER_INFO_TYPE PRIMARY KEY (TYPE_ID)
);

INSERT INTO USER_INFO_TYPE(TYPE_ID, TYPE_NAME, IS_MANDATORY) VALUES (1, 'Name', 1);
INSERT INTO USER_INFO_TYPE(TYPE_ID, TYPE_NAME, IS_MANDATORY) VALUES (2, 'Department', 1);
INSERT INTO USER_INFO_TYPE(TYPE_ID, TYPE_NAME, IS_MANDATORY) VALUES (3, 'Site', 1);
INSERT INTO USER_INFO_TYPE(TYPE_ID, TYPE_NAME, IS_MANDATORY) VALUES (4, 'Address', 1);

CREATE TABLE USER_INFO(
  USER_INFO_ID NUMBER,
  USET_ID NUMBER,
  USER_INFO_TYPE NUMBER,
  USER_INFO_VALUE VARCHAR(100),
  CONSTRAINT PK_USER_INFO PRIMARY KEY (USER_INFO_ID),
  CONSTRAINT FK_USER_INFO_USERS FOREIGN KEY (USET_ID) REFERENCES USERS(USER_ID),
  CONSTRAINT FK_USER_INFO_USER_INFO_TYPE FOREIGN KEY (USER_INFO_TYPE) REFERENCES USER_INFO_TYPE(TYPE_ID)
);

CREATE TABLE CATALOG(
  CATALOG_ID NUMBER,
  PARENT_CATALOG NUMBER,
  CATALOG_DEPTH NUMBER,
  CATALOG_NAME VARCHAR(50),
  IS_DELETED NUMBER(1),
  CONSTRAINT PK_CATALOG PRIMARY KEY (CATALOG_ID),
  CONSTRAINT FK_PARENT_CATALOG FOREIGN KEY (PARENT_CATALOG) REFERENCES CATALOG(CATALOG_ID)
);

CREATE TABLE CURRENCY_TYPE(
  CURRENCY_ID NUMBER,
  CURRENCY_NAME VARCHAR(20),
  CURRENCY_SYMBOL VARCHAR(5),
  CURRENCY_EXCHANGE NUMBER(10,5),
  CONSTRAINT PK_CURRENCY_TYPE PRIMARY KEY (CURRENCY_ID)
);

INSERT INTO CURRENCY_TYPE(CURRENCY_ID, CURRENCY_NAME, CURRENCY_SYMBOL, CURRENCY_EXCHANGE) VALUES (1, 'RMB', '￥', 1.0000);
INSERT INTO CURRENCY_TYPE(CURRENCY_ID, CURRENCY_NAME, CURRENCY_SYMBOL, CURRENCY_EXCHANGE) VALUES (2, 'USD', '＄', 6.887);
INSERT INTO CURRENCY_TYPE(CURRENCY_ID, CURRENCY_NAME, CURRENCY_SYMBOL, CURRENCY_EXCHANGE) VALUES (3, 'JPY', 'J￥', 0.06189);
INSERT INTO CURRENCY_TYPE(CURRENCY_ID, CURRENCY_NAME, CURRENCY_SYMBOL, CURRENCY_EXCHANGE) VALUES (4, 'EUR', '€', 7.3925);
INSERT INTO CURRENCY_TYPE(CURRENCY_ID, CURRENCY_NAME, CURRENCY_SYMBOL, CURRENCY_EXCHANGE) VALUES (5, 'GBP', '￡', 8.6088);
INSERT INTO CURRENCY_TYPE(CURRENCY_ID, CURRENCY_NAME, CURRENCY_SYMBOL, CURRENCY_EXCHANGE) VALUES (6, 'CHF', 'CHF', 6.914);
INSERT INTO CURRENCY_TYPE(CURRENCY_ID, CURRENCY_NAME, CURRENCY_SYMBOL, CURRENCY_EXCHANGE) VALUES (7, 'CAD', 'C＄', 5.1833);
INSERT INTO CURRENCY_TYPE(CURRENCY_ID, CURRENCY_NAME, CURRENCY_SYMBOL, CURRENCY_EXCHANGE) VALUES (8, 'AUD', 'A＄', 5.2823);
INSERT INTO CURRENCY_TYPE(CURRENCY_ID, CURRENCY_NAME, CURRENCY_SYMBOL, CURRENCY_EXCHANGE) VALUES (9, 'HKD', 'HK＄', 0.8862);
INSERT INTO CURRENCY_TYPE(CURRENCY_ID, CURRENCY_NAME, CURRENCY_SYMBOL, CURRENCY_EXCHANGE) VALUES (10, 'NZD', 'N＄', 4.8436);
INSERT INTO CURRENCY_TYPE(CURRENCY_ID, CURRENCY_NAME, CURRENCY_SYMBOL, CURRENCY_EXCHANGE) VALUES (11, 'RUB', 'RUB', 0.1229);
INSERT INTO CURRENCY_TYPE(CURRENCY_ID, CURRENCY_NAME, CURRENCY_SYMBOL, CURRENCY_EXCHANGE) VALUES (12, 'KRW', '￦', 0.00618);
INSERT INTO CURRENCY_TYPE(CURRENCY_ID, CURRENCY_NAME, CURRENCY_SYMBOL, CURRENCY_EXCHANGE) VALUES (13, 'THB', '฿', 0.2002);

CREATE TABLE PRICE(
  PRICE_ID NUMBER,
  PRICE_VALUE NUMBER(20,2),
  CURRENCY_ID NUMBER,
  CONSTRAINT PK_PRICE PRIMARY KEY (PRICE_ID),
  CONSTRAINT FK_PRICE_CURRENCY_TYPE FOREIGN KEY (CURRENCY_ID) REFERENCES CURRENCY_TYPE(CURRENCY_ID)
);

CREATE TABLE SKU_TYPE(
  SKU_ID NUMBER,
  SKU_NAME VARCHAR(50),
  IS_MANDATORY VARCHAR(1),
  CONSTRAINT PK_SKU_TYPE PRIMARY KEY (SKU_ID)
);

INSERT INTO SKU_TYPE(SKU_ID, SKU_NAME, IS_MANDATORY) VALUES (1, 'Brand', 0);
INSERT INTO SKU_TYPE(SKU_ID, SKU_NAME, IS_MANDATORY) VALUES (2, 'Model', 0);
INSERT INTO SKU_TYPE(SKU_ID, SKU_NAME, IS_MANDATORY) VALUES (3, 'Configuration', 0);
INSERT INTO SKU_TYPE(SKU_ID, SKU_NAME, IS_MANDATORY) VALUES (4, 'Level', 0);
INSERT INTO SKU_TYPE(SKU_ID, SKU_NAME, IS_MANDATORY) VALUES (5, 'Color', 0);
INSERT INTO SKU_TYPE(SKU_ID, SKU_NAME, IS_MANDATORY) VALUES (6, 'Packing Size', 0);
INSERT INTO SKU_TYPE(SKU_ID, SKU_NAME, IS_MANDATORY) VALUES (7, 'Unit', 0);
INSERT INTO SKU_TYPE(SKU_ID, SKU_NAME, IS_MANDATORY) VALUES (8, 'Production Date', 0);
INSERT INTO SKU_TYPE(SKU_ID, SKU_NAME, IS_MANDATORY) VALUES (9, 'Expiring Date', 0);
INSERT INTO SKU_TYPE(SKU_ID, SKU_NAME, IS_MANDATORY) VALUES (10, 'Guarantee Period', 0);
INSERT INTO SKU_TYPE(SKU_ID, SKU_NAME, IS_MANDATORY) VALUES (11, 'Usage', 0);
INSERT INTO SKU_TYPE(SKU_ID, SKU_NAME, IS_MANDATORY) VALUES (12, 'Manufacturer', 0);
INSERT INTO SKU_TYPE(SKU_ID, SKU_NAME, IS_MANDATORY) VALUES (13, 'Price', 1);


CREATE TABLE OFFICE_DEPOT(
  ITEM_ID NUMBER,
  CATALOG_ID NUMBER,
  SUPPLIER_ID NUMBER,
  IS_DELETED NUMBER(1),
  CONSTRAINT PK_OFFICE_DEPOT PRIMARY KEY (ITEM_ID),
  CONSTRAINT FK_OFFICE_DEPOT_CATALOG FOREIGN KEY (CATALOG_ID) REFERENCES CATALOG(CATALOG_ID),
  CONSTRAINT FK_OFFICE_DEPOT_SUPPLIER FOREIGN KEY (SUPPLIER_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE SKU(
  SKU_ID NUMBER,
  OFFICE_DEPOT_ID NUMBER,
  SKU_TYPE_ID NUMBER,
  SKU_VALUE VARCHAR(100),
  IS_DELETED NUMBER(1),
  CONSTRAINT PK_SKU PRIMARY KEY (SKU_ID),
  CONSTRAINT FK_SKU_OFFICE_DEPOT FOREIGN KEY (OFFICE_DEPORT_ID) REFERENCES OFFICE_DEPOT(ITEM_ID),
  CONSTRAINT FK_SKU_SKU_TYPE FOREIGN KEY (SKU_TYPE_ID) REFERENCES SKU_TYPE(SKU_ID)
);

CREATE TABLE ORDER_STATUS(
  STATUS_ID NUMBER,
  SATUS_NAME VARCHAR(20),
  CONSTRAINT PK_ORDER_STATUS PRIMARY KEY (STATUS_ID)
);

INSERT INTO ORDER_STATUS(STATUS_ID, SATUS_NAME) VALUES (1, 'Saved');
INSERT INTO ORDER_STATUS(STATUS_ID, SATUS_NAME) VALUES (2, 'Submitted');
INSERT INTO ORDER_STATUS(STATUS_ID, SATUS_NAME) VALUES (3, 'Approved');
INSERT INTO ORDER_STATUS(STATUS_ID, SATUS_NAME) VALUES (4, 'Processing');
INSERT INTO ORDER_STATUS(STATUS_ID, SATUS_NAME) VALUES (5, 'Completed');
INSERT INTO ORDER_STATUS(STATUS_ID, SATUS_NAME) VALUES (6, 'Deleted');
INSERT INTO ORDER_STATUS(STATUS_ID, SATUS_NAME) VALUES (7, 'Refused');
INSERT INTO ORDER_STATUS(STATUS_ID, SATUS_NAME) VALUES (8, 'Canceled');

CREATE TABLE ORDER_TYPE(
  TYPE_ID NUMBER,
  TYPE_NAME VARCHAR(50),
  CONSTRAINT PK_ORDER_TYPE PRIMARY KEY (TYPE_ID)
);

INSERT INTO ORDER_TYPE(TYPE_ID, TYPE_NAME) VALUES (1, 'Standard PO');
INSERT INTO ORDER_TYPE(TYPE_ID, TYPE_NAME) VALUES (2, 'Blanket PA');
INSERT INTO ORDER_TYPE(TYPE_ID, TYPE_NAME) VALUES (3, 'Contract PA');
INSERT INTO ORDER_TYPE(TYPE_ID, TYPE_NAME) VALUES (4, 'Planned PO');

CREATE TABLE ORDERS(
  ORDER_ID NUMBER,
  ORDER_TYPE NUMBER,
  ORDER_STATUS NUMBER,
  PRICE_ID NUMBER,
  CREATE_TIME TIMESTAMP DEFAULT systimestamp,
  SUBMIT_TIME TIMESTAMP,
  APPROVE_TIME TIMESTAMP,
  PROCESS_TIME TIMESTAMP,
  COMPLETE_TIME TIMESTAMP,
  DELETE_TIME TIMESTAMP,
  REFUSE_TIME TIMESTAMP,
  CONSTRAINT PK_ORDER PRIMARY KEY (ORDER_ID),
  CONSTRAINT FK_ORDERS_ORDER_TYPE FOREIGN KEY (ORDER_TYPE) REFERENCES ORDER_TYPE(TYPE_ID),
  CONSTRAINT FK_ORDERS_ORDER_STATUS FOREIGN KEY (ORDER_STATUS) REFERENCES ORDER_STATUS(STATUS_ID),
  CONSTRAINT FK_ORDERS_PRICE FOREIGN KEY (PRICE_ID) REFERENCES PRICE(PRICE_ID)
);

CREATE TABLE ORDER_ITEM(
  ORDER_ID NUMBER,
  OFFICE_DEPOT_ID NUMBER,
  AMOUNT NUMBER,
  DISCOUNT NUMBER(1,2),
  CONSTRAINT PK_ORDER_ITEM PRIMARY KEY (ORDER_ID, OFFICE_DEPOT_ID),
  CONSTRAINT FK_ORDER_ITEM_ORDER_ID FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID),
  --CONSTRAINT FK_ORDER_ITEM_OFFICE_DEPOT FOREIGN KEY (OFFICE_DEPOT_ID) REFERENCES OFFICE_DEPOT(ITEM_ID)
);